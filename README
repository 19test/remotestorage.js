INSTRUCTIONS:
-this assumes you will run both the clientside and serverside on your devbox localhost, and that you have a working webserver installed there, with php and mysql (if you don't have these, there should be plenty web documentation on how to easily install them on your operating system.
-download the tar file from:
	http://github.com/michiel-unhosted/unhosted/tarball/v0.1/
-open a shell, and extract the tarball. All the example paths and commands are for Ubuntu Linux, please derive your own OS's equivalents for Mac and Windows. Search the web where necessary, and improve this README file if you find any significant (platform-specific) information. So on Ubuntu, you can extract the tarball with:
	cd Downloads; tar -xzvf michiel-unhosted-unhosted-*.tar.gz
-you should see a list of all the files that were extracted. move the whole extracted dir to a subdirectory you call unhosted/, under your webroot, for instance /var/www/unhosted/. You probably need sudo to write in your webroot:
	sudo mkdir /var/www/unhosted ; sudo mv michiel-unhosted-unhosted-*/* /var/www/unhosted/
-check that 
	http://localhost/unhosted/cloudside/unhosted.php
 displays:
	This url is an unhosted JSON storage, and only works over CORS-AJAX. Please access using the unhosted JS library (www.unhosted.org).

-point helloblog.com and example.unhosted.org to 127.0.0.1 in /etc/hosts:
	sudo gedit /etc/hosts
----
127.0.0.1	helloblog.com
127.0.0.1	example.unhosted.org
----
-check that 
	http://example.unhosted.org/unhosted/cloudside/unhosted.php
 also displays:
	This url is an unhosted JSON storage, and only works over CORS-AJAX. Please access using the unhosted JS library (www.unhosted.org).
-now edit /var/www/unhosted/cloudside/config.php and put in some mysql credentials in there. If the user you specify has permissions to create databases, it will create the database name you specify on first access, along with all its tables.
-browse to:
	http://helloblog.com/unhosted/wappside/genkey/genkey.html
 and click the leftmost button, 'Create js files for wappblog example'. You will see two short .js files show up. ATTENTION: this will take several seconds in mozilla, during which the browser will block. If anyone volunteers, you are more than welcome to make this asynchronous, and with a loading bar or some other indication that the wait is expected and the browser is not hung.
- Cut-and-paste the .js files that are generated, and save them into /var/www/unhosted/wappside/examples/wappblog/[indicated path].
- open up:
	http://helloblog.com/unhosted/wappside/examples/wappblog/admin/editor.html
-make sure you have FireBug or WireShark or equivalent open during the following steps, so you can see that helloblog.com is really only serving static content, which (apart from serving as a hello world for you to build upon) is the point of this example. All dynamic content is handled by the end-user-supplied example.unhosted.org, over the Unhosted-JSON protocol. That way, the app author doesn't incur costs when people use his altruistically shared open source app.
-type some text and hit the 'unhost this blogpost!' button. This should send a SET command inside a POST from the browser to example.unhosted.org (which is running on your localhost, but in the real world, helloblog.com static file hosting would be provided by the web app author or some channel that carries his app, and example.unhosted.org would be independent from the web app author, and contain the unhosted account of the end user. That way, unhosted web apps are very scalable, and no matter how many people are using the app you wrote at the same time, you'll only have to host the static source code.
-if you think your AJAX call reached the unhosted server, now have your firebug still open, and browse to:
	http://helloblog.com/unhosted/wappside/examples/wappblog/bootloader.html
-in firebug you should see it post a GET command to example.unhosted.org, then the js will check the PubSign signature, decrypt the content, and assign the blog post text to the <div> tag in bootloader.html.
-Now open up bootloader.html and editor.html, and have a look at the source code. They only have 4 lines of code each. So hopefully you can see how easy it is to program unhosted websites using the "unhosted.get(user, key)" and "unhosted.set(user, key, value)" commands.
- Behind the scenes, the text you typed was first encrypted with 's', using symmetric Rijndael. This was formed into the UJ/0.1 GET-command, which plays the role here of the "Pub", the publication in the pub/sub-model. Then this was signed with 'd', using RSA, to create "the PubSign that Signs the Pub". Writecaps 'w' were used to access unhosted account 'r@c'. The unhosted server allows CORS via the Access-Control-Allow-Origin header, and the HTTP OPTIONS command, but the HTTP referer of the POST is used to identify the app, so that browsers can enforce same-origin policies. On the subscriber end, upon retrieval of the blogpost from 'r@c' (again with CORS-AJAX and same-origin separation via the referer), the PubSign is checked against public key 'n', then the same Rijndael 's' is used for decryption, and the result is displayed. However, all of this is done inside the unhosted JS library, and you as the app developer only have to make sure you fill in all the correct bits you got from genkey, call unhosted.set and unhosted.get, and it just works!
-so far you have run this test on localhost, but obviously you would make us very happy if you blog about Unhosted, and what would be more convincing than "an unhosted blogpost about unhosted". Just make sure that you
	- change the chans list to something only you know, and not the ones that are in the source code,
	- do not (obviously) publish the file "PublishingPassword.js" or the admin directory
	- understand both the php and js code you are publishing, and do so at your own risk and make sure you don't get hacked.
	- This is alpha software so it's likely there are still one or two security holes in it. When in doubt, don't.
-the second example is wappmail. it's a bit cumbersome to try it out, because it requires you to create multiple users, cut-and-paste their addresses and passwords into the interface, log in as one, send an email, log in as the other, check your email, etcetera. In part the example is useful for showing how cumbersome public keys are. But it is also a working example of the "unhosted.send(from, to, key, body)" and "unhosted.receive(user, key)" commands.
-the third example is a bit advanced; it's called wappbook because it's an addressbook, and demonstrates the StarSign pki. All it does is establish trust through a behind-the-scenes fabric-based pki. All there is to see is that after your friend logged in, in your addressbook he will change from 'pending' to 'ok'. The algorithms behind that it runs before it gets to put 'ok' there are, I think, the best part of the unhosted library. But it's mainly there for people who are interested in the geeky details.
-if you have any improvements to make this demo more user-friendly, or anything else you wish to share with us, please contribute! We're at http://groups.google.com/group/unhosted. We're a friendly bunch, and your contribution is more than welcome.
