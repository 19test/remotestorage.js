INSTRUCTIONS:
-download the tar file from:
	http://github.com/michiel-unhosted/unhosted/tarball/v0.1/
-extract it:
	tar -xzvf michiel-unhosted-unhosted-*.tar.gz
-move the extracted dir to your webroot under unhosted/, for instance /var/www/unhosted/:
	sudo mv michiel-unhosted-unhosted-* /var/www/unhosted
-this assumes you will run both the clientside and serverside on localhost, and that you have a working webserver installed.
-check that 
	http://localhost/unhosted/cloudside/unhosted.php
 displays:
	ERROR please add a "protocol" key to your POST

-point helloblog.com and example.unhosted.org to 127.0.0.1 in /etc/hosts:
	sudo gedit /etc/hosts
----
127.0.0.1	helloblog.com
127.0.0.1	example.unhosted.org
----
-check that 
	http://example.unhosted.org/unhosted/cloudside/unhosted.php
 also displays:
	ERROR please add a "protocol" key to your POST
-make sure /tmp is writable for the www-user.
-browse to:
	http://helloblog.com/unhosted/wappside/genkey/genkey.html
 and generate a key for the wappblog example. Cut-and-paste the .js files that are generated, and save them into /var/www/unhosted/wappside/examples/wappblog/ or the equivalent path.
-make sure you have FireBug open and check that the server doesn't return any errors in response to the POST when you browse to:
	http://helloblog.com/unhosted/wappside/examples/wappblog/editor.html
 and hit the 'save' button. This should send a SET command from helloblog.com to example.unhosted.org
-now have your firebug still open, and browse to:
	http://helloblog.com/unhosted/wappside/examples/wappblog/bootloader.html
-in firebug you should see it post a GET command to example.unhosted.org, then the js will check the PubSign signature, decrypt the content, and assign the blog post text to the <div> tag in bootloader.html. If you open up bootloader.html and editor.html, hopefully you can see how easy it is to program unhosted websites using the "unhosted.get(user, key)" and "unhosted.set(user, key, value)" commands. It just works!
-so far you have run this test on localhost, but obviously you would make us very happy if you blog about Unhosted, and what would be more convincing than "an unhosted blogpost about unhosted". Just make sure that you
	- change the chans list to something only you know, and not the ones that are in the source code,
	- do not (obviously) publish the file "PublishingPassword.js" or the admin directory
	- understand both the php and js code you are publishing, and do so at your own risk and make sure you don't get hacked.
	- This is alpha software so it's likely there are still one or two security holes in it. When in doubt, don't.
-the second example is wappmail. it's a bit cumbersome to try it out, because it requires you to create multiple users, cut-and-paste their addresses and passwords into the interface, log in as one, send an email, log in as the other, check your email, etcetera. In part the example is useful for showing how cumbersome public keys are. But it is also a working example of the "unhosted.send(from, to, key, body)" and "unhosted.receive(user, key)" commands.
-the third example is a bit advanced; it's called wappbook because it's an addressbook, and demonstrates the StarSign pki. All it does is establish trust through a behind-the-scenes fabric-based pki. All there is to see is that after your friend logged in, in your addressbook he will change from 'pending' to 'ok'. The algorithms behind that it runs before it gets to put 'ok' there are, I think, the best part of the unhosted library. But it's mainly there for people who are interested in the geeky details.
-if you have any improvements to make this demo more user-friendly, or anything else you wish to share with us, please contribute! We're at http://groups.google.com/group/unhosted. We're a friendly bunch, and your contribution is more than welcome.
